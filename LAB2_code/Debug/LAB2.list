
LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e20  08002e20  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002e20  08002e20  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e20  08002e20  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e20  08002e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000034  08002e5c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002e5c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000872c  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001591  00000000  00000000  00028789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00029d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016362  00000000  00000000  0002af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000979f  00000000  00000000  000412da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822d4  00000000  00000000  0004aa79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccd4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  000ccda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002de4 	.word	0x08002de4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002de4 	.word	0x08002de4

0800014c <setTimer0>:
int timer2_counter = 0;

int TIMER_CYCLE = 10;

void setTimer0(int duration)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIMER_CYCLE;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer0+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer0+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer0+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000024 	.word	0x20000024
 8000178:	20000054 	.word	0x20000054
 800017c:	20000050 	.word	0x20000050

08000180 <setTimer1>:

void setTimer1(int duration)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <setTimer1+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <setTimer1+0x2c>)
 8000194:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <setTimer1+0x30>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000024 	.word	0x20000024
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	20000058 	.word	0x20000058

080001b4 <setTimer2>:

void setTimer2(int duration)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <setTimer2+0x28>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <setTimer2+0x2c>)
 80001c8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <setTimer2+0x30>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000024 	.word	0x20000024
 80001e0:	20000064 	.word	0x20000064
 80001e4:	20000060 	.word	0x20000060

080001e8 <timerRun>:

void timerRun()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 80001ec:	4b19      	ldr	r3, [pc, #100]	; (8000254 <timerRun+0x6c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	dd0b      	ble.n	800020c <timerRun+0x24>
		timer0_counter--;
 80001f4:	4b17      	ldr	r3, [pc, #92]	; (8000254 <timerRun+0x6c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	3b01      	subs	r3, #1
 80001fa:	4a16      	ldr	r2, [pc, #88]	; (8000254 <timerRun+0x6c>)
 80001fc:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0){
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <timerRun+0x6c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d102      	bne.n	800020c <timerRun+0x24>
			timer0_flag = 1;
 8000206:	4b14      	ldr	r3, [pc, #80]	; (8000258 <timerRun+0x70>)
 8000208:	2201      	movs	r2, #1
 800020a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer1_counter > 0){
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <timerRun+0x74>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	dd0b      	ble.n	800022c <timerRun+0x44>
		timer1_counter--;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <timerRun+0x74>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	3b01      	subs	r3, #1
 800021a:	4a10      	ldr	r2, [pc, #64]	; (800025c <timerRun+0x74>)
 800021c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <timerRun+0x74>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d102      	bne.n	800022c <timerRun+0x44>
			timer1_flag = 1;
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <timerRun+0x78>)
 8000228:	2201      	movs	r2, #1
 800022a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <timerRun+0x7c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	dd0b      	ble.n	800024c <timerRun+0x64>
		timer2_counter--;
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <timerRun+0x7c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	3b01      	subs	r3, #1
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <timerRun+0x7c>)
 800023c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <timerRun+0x7c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d102      	bne.n	800024c <timerRun+0x64>
			timer2_flag = 1;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <timerRun+0x80>)
 8000248:	2201      	movs	r2, #1
 800024a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	20000054 	.word	0x20000054
 8000258:	20000050 	.word	0x20000050
 800025c:	2000005c 	.word	0x2000005c
 8000260:	20000058 	.word	0x20000058
 8000264:	20000064 	.word	0x20000064
 8000268:	20000060 	.word	0x20000060

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f001 fab7 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f889 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f90f 	bl	800049c <MX_GPIO_Init>
  MX_TIM2_Init();
 800027e:	f000 f8c1 	bl	8000404 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  int another_index = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
  int index = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	603b      	str	r3, [r7, #0]
  updateClockBuffer();
 800028a:	f000 f967 	bl	800055c <updateClockBuffer>
  update7SEG(0);
 800028e:	2000      	movs	r0, #0
 8000290:	f000 f9d2 	bl	8000638 <update7SEG>
  setTimer0(500);
 8000294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000298:	f7ff ff58 	bl	800014c <setTimer0>
  setTimer1(1000);
 800029c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a0:	f7ff ff6e 	bl	8000180 <setTimer1>
  resetLEDMatrix();
 80002a4:	f000 fb72 	bl	800098c <resetLEDMatrix>
  setTimer2(50);
 80002a8:	2032      	movs	r0, #50	; 0x32
 80002aa:	f7ff ff83 	bl	80001b4 <setTimer2>
  HAL_TIM_Base_Start_IT(&htim2);
 80002ae:	482f      	ldr	r0, [pc, #188]	; (800036c <main+0x100>)
 80002b0:	f002 f9e0 	bl	8002674 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(timer2_flag == 1)
 80002b4:	4b2e      	ldr	r3, [pc, #184]	; (8000370 <main+0x104>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d10d      	bne.n	80002d8 <main+0x6c>
	  {
		  if(another_index > 7)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b07      	cmp	r3, #7
 80002c0:	dd01      	ble.n	80002c6 <main+0x5a>
		  {
			  another_index = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
		  }

		  updateLEDMatrix(another_index++);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	1c5a      	adds	r2, r3, #1
 80002ca:	607a      	str	r2, [r7, #4]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fb93 	bl	80009f8 <updateLEDMatrix>
		  setTimer2(50);
 80002d2:	2032      	movs	r0, #50	; 0x32
 80002d4:	f7ff ff6e 	bl	80001b4 <setTimer2>
	  }

	  if(timer0_flag == 1)
 80002d8:	4b26      	ldr	r3, [pc, #152]	; (8000374 <main+0x108>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d10e      	bne.n	80002fe <main+0x92>
	  {
		  if(index > 3)
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	2b03      	cmp	r3, #3
 80002e4:	dd01      	ble.n	80002ea <main+0x7e>
		  {
			  index = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	603b      	str	r3, [r7, #0]
		  }

		  update7SEG(index++);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	603a      	str	r2, [r7, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f9a1 	bl	8000638 <update7SEG>
		  setTimer0(500);
 80002f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fa:	f7ff ff27 	bl	800014c <setTimer0>
	  }

	  if(timer1_flag == 1)
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <main+0x10c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d1d6      	bne.n	80002b4 <main+0x48>
	  {
		  HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 8000306:	2120      	movs	r1, #32
 8000308:	481c      	ldr	r0, [pc, #112]	; (800037c <main+0x110>)
 800030a:	f001 fd6d 	bl	8001de8 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 800030e:	2110      	movs	r1, #16
 8000310:	481a      	ldr	r0, [pc, #104]	; (800037c <main+0x110>)
 8000312:	f001 fd69 	bl	8001de8 <HAL_GPIO_TogglePin>
		  second++;
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <main+0x114>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	4a18      	ldr	r2, [pc, #96]	; (8000380 <main+0x114>)
 800031e:	6013      	str	r3, [r2, #0]
		  if (second >= 60)
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <main+0x114>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b3b      	cmp	r3, #59	; 0x3b
 8000326:	dd07      	ble.n	8000338 <main+0xcc>
		  {
			  second = 0;
 8000328:	4b15      	ldr	r3, [pc, #84]	; (8000380 <main+0x114>)
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
		  	  minute++;
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <main+0x118>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	4a13      	ldr	r2, [pc, #76]	; (8000384 <main+0x118>)
 8000336:	6013      	str	r3, [r2, #0]
		  }
		  if(minute >= 60)
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <main+0x118>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b3b      	cmp	r3, #59	; 0x3b
 800033e:	dd07      	ble.n	8000350 <main+0xe4>
		  {
			  minute = 0;
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <main+0x118>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
		  	  hour++;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <main+0x11c>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3301      	adds	r3, #1
 800034c:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <main+0x11c>)
 800034e:	6013      	str	r3, [r2, #0]
		  }
		  if(hour >= 24)
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <main+0x11c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b17      	cmp	r3, #23
 8000356:	dd02      	ble.n	800035e <main+0xf2>
		  {
			  hour = 0;
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <main+0x11c>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
		  }
		  updateClockBuffer();
 800035e:	f000 f8fd 	bl	800055c <updateClockBuffer>
		  setTimer1(1000);
 8000362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000366:	f7ff ff0b 	bl	8000180 <setTimer1>
	  if(timer2_flag == 1)
 800036a:	e7a3      	b.n	80002b4 <main+0x48>
 800036c:	20000068 	.word	0x20000068
 8000370:	20000060 	.word	0x20000060
 8000374:	20000050 	.word	0x20000050
 8000378:	20000058 	.word	0x20000058
 800037c:	40010800 	.word	0x40010800
 8000380:	20000020 	.word	0x20000020
 8000384:	2000001c 	.word	0x2000001c
 8000388:	20000018 	.word	0x20000018

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b090      	sub	sp, #64	; 0x40
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fd1a 	bl	8002dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b6:	2310      	movs	r3, #16
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fd2a 	bl	8001e1c <HAL_RCC_OscConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ce:	f001 f94f 	bl	8001670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
 80003d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 ff96 	bl	800231c <HAL_RCC_ClockConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003f6:	f001 f93b 	bl	8001670 <Error_Handler>
  }
}
 80003fa:	bf00      	nop
 80003fc:	3740      	adds	r7, #64	; 0x40
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000418:	463b      	mov	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000420:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <MX_TIM2_Init+0x94>)
 8000422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000426:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_TIM2_Init+0x94>)
 800042a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800042e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <MX_TIM2_Init+0x94>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_TIM2_Init+0x94>)
 8000438:	2209      	movs	r2, #9
 800043a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <MX_TIM2_Init+0x94>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_TIM2_Init+0x94>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000448:	4813      	ldr	r0, [pc, #76]	; (8000498 <MX_TIM2_Init+0x94>)
 800044a:	f002 f8c3 	bl	80025d4 <HAL_TIM_Base_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000454:	f001 f90c 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800045c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	4619      	mov	r1, r3
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <MX_TIM2_Init+0x94>)
 8000466:	f002 fa41 	bl	80028ec <HAL_TIM_ConfigClockSource>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000470:	f001 f8fe 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000474:	2300      	movs	r3, #0
 8000476:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000478:	2300      	movs	r3, #0
 800047a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800047c:	463b      	mov	r3, r7
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_TIM2_Init+0x94>)
 8000482:	f002 fc19 	bl	8002cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800048c:	f001 f8f0 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	3718      	adds	r7, #24
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000068 	.word	0x20000068

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b22      	ldr	r3, [pc, #136]	; (800053c <MX_GPIO_Init+0xa0>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a21      	ldr	r2, [pc, #132]	; (800053c <MX_GPIO_Init+0xa0>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b1f      	ldr	r3, [pc, #124]	; (800053c <MX_GPIO_Init+0xa0>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b1c      	ldr	r3, [pc, #112]	; (800053c <MX_GPIO_Init+0xa0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <MX_GPIO_Init+0xa0>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b19      	ldr	r3, [pc, #100]	; (800053c <MX_GPIO_Init+0xa0>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|RED_Pin
 80004e0:	2200      	movs	r2, #0
 80004e2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80004e6:	4816      	ldr	r0, [pc, #88]	; (8000540 <MX_GPIO_Init+0xa4>)
 80004e8:	f001 fc66 	bl	8001db8 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|ROW2_Pin
 80004ec:	2200      	movs	r2, #0
 80004ee:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80004f2:	4814      	ldr	r0, [pc, #80]	; (8000544 <MX_GPIO_Init+0xa8>)
 80004f4:	f001 fc60 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|RED_Pin
 80004f8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80004fc:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	4619      	mov	r1, r3
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <MX_GPIO_Init+0xa4>)
 8000512:	f001 fad7 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin d_Pin e_Pin f_Pin
                           g_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|ROW2_Pin
 8000516:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800051a:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2302      	movs	r3, #2
 8000526:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	4619      	mov	r1, r3
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_GPIO_Init+0xa8>)
 8000530:	f001 fac8 	bl	8001ac4 <HAL_GPIO_Init>

}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800
 8000544:	40010c00 	.word	0x40010c00

08000548 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000550:	f7ff fe4a 	bl	80001e8 <timerRun>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <updateClockBuffer>:

void updateClockBuffer(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	if(hour < 10)
 8000560:	4b31      	ldr	r3, [pc, #196]	; (8000628 <updateClockBuffer+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b09      	cmp	r3, #9
 8000566:	dc12      	bgt.n	800058e <updateClockBuffer+0x32>
	{
		led_buffer[0] = 0;
 8000568:	4b30      	ldr	r3, [pc, #192]	; (800062c <updateClockBuffer+0xd0>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
		led_buffer[1] = hour%10;
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <updateClockBuffer+0xcc>)
 8000570:	6819      	ldr	r1, [r3, #0]
 8000572:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <updateClockBuffer+0xd4>)
 8000574:	fb83 2301 	smull	r2, r3, r3, r1
 8000578:	109a      	asrs	r2, r3, #2
 800057a:	17cb      	asrs	r3, r1, #31
 800057c:	1ad2      	subs	r2, r2, r3
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	1aca      	subs	r2, r1, r3
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <updateClockBuffer+0xd0>)
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	e018      	b.n	80005c0 <updateClockBuffer+0x64>
	}
	else
	{
		led_buffer[0] = hour/10;
 800058e:	4b26      	ldr	r3, [pc, #152]	; (8000628 <updateClockBuffer+0xcc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a27      	ldr	r2, [pc, #156]	; (8000630 <updateClockBuffer+0xd4>)
 8000594:	fb82 1203 	smull	r1, r2, r2, r3
 8000598:	1092      	asrs	r2, r2, #2
 800059a:	17db      	asrs	r3, r3, #31
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	4a23      	ldr	r2, [pc, #140]	; (800062c <updateClockBuffer+0xd0>)
 80005a0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = hour%10;
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <updateClockBuffer+0xcc>)
 80005a4:	6819      	ldr	r1, [r3, #0]
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <updateClockBuffer+0xd4>)
 80005a8:	fb83 2301 	smull	r2, r3, r3, r1
 80005ac:	109a      	asrs	r2, r3, #2
 80005ae:	17cb      	asrs	r3, r1, #31
 80005b0:	1ad2      	subs	r2, r2, r3
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	1aca      	subs	r2, r1, r3
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <updateClockBuffer+0xd0>)
 80005be:	605a      	str	r2, [r3, #4]
	}

	if(minute < 10)
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <updateClockBuffer+0xd8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b09      	cmp	r3, #9
 80005c6:	dc12      	bgt.n	80005ee <updateClockBuffer+0x92>
	{
		led_buffer[2] = 0;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <updateClockBuffer+0xd0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
		led_buffer[3] = minute%10;
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <updateClockBuffer+0xd8>)
 80005d0:	6819      	ldr	r1, [r3, #0]
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <updateClockBuffer+0xd4>)
 80005d4:	fb83 2301 	smull	r2, r3, r3, r1
 80005d8:	109a      	asrs	r2, r3, #2
 80005da:	17cb      	asrs	r3, r1, #31
 80005dc:	1ad2      	subs	r2, r2, r3
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	1aca      	subs	r2, r1, r3
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <updateClockBuffer+0xd0>)
 80005ea:	60da      	str	r2, [r3, #12]
	else
	{
		led_buffer[2] = minute/10;
		led_buffer[3] = minute%10;
	}
}
 80005ec:	e018      	b.n	8000620 <updateClockBuffer+0xc4>
		led_buffer[2] = minute/10;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <updateClockBuffer+0xd8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <updateClockBuffer+0xd4>)
 80005f4:	fb82 1203 	smull	r1, r2, r2, r3
 80005f8:	1092      	asrs	r2, r2, #2
 80005fa:	17db      	asrs	r3, r3, #31
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <updateClockBuffer+0xd0>)
 8000600:	6093      	str	r3, [r2, #8]
		led_buffer[3] = minute%10;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <updateClockBuffer+0xd8>)
 8000604:	6819      	ldr	r1, [r3, #0]
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <updateClockBuffer+0xd4>)
 8000608:	fb83 2301 	smull	r2, r3, r3, r1
 800060c:	109a      	asrs	r2, r3, #2
 800060e:	17cb      	asrs	r3, r1, #31
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	4613      	mov	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	1aca      	subs	r2, r1, r3
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <updateClockBuffer+0xd0>)
 800061e:	60da      	str	r2, [r3, #12]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000018 	.word	0x20000018
 800062c:	20000000 	.word	0x20000000
 8000630:	66666667 	.word	0x66666667
 8000634:	2000001c 	.word	0x2000001c

08000638 <update7SEG>:

void update7SEG(int index)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b03      	cmp	r3, #3
 8000644:	f200 8084 	bhi.w	8000750 <update7SEG+0x118>
 8000648:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <update7SEG+0x18>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000661 	.word	0x08000661
 8000654:	0800069d 	.word	0x0800069d
 8000658:	080006d9 	.word	0x080006d9
 800065c:	08000715 	.word	0x08000715
	 switch (index)
	 {
	 case 0:
	 {
		 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2140      	movs	r1, #64	; 0x40
 8000664:	483c      	ldr	r0, [pc, #240]	; (8000758 <update7SEG+0x120>)
 8000666:	f001 fba7 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	483a      	ldr	r0, [pc, #232]	; (8000758 <update7SEG+0x120>)
 8000670:	f001 fba2 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067a:	4837      	ldr	r0, [pc, #220]	; (8000758 <update7SEG+0x120>)
 800067c:	f001 fb9c 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	4834      	ldr	r0, [pc, #208]	; (8000758 <update7SEG+0x120>)
 8000688:	f001 fb96 	bl	8001db8 <HAL_GPIO_WritePin>
		 display7SEG(led_buffer[index]);
 800068c:	4a33      	ldr	r2, [pc, #204]	; (800075c <update7SEG+0x124>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f863 	bl	8000760 <display7SEG>
		 break;
 800069a:	e059      	b.n	8000750 <update7SEG+0x118>
	 }
	 case 1:
	 {
		 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <update7SEG+0x120>)
 80006a2:	f001 fb89 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	482b      	ldr	r0, [pc, #172]	; (8000758 <update7SEG+0x120>)
 80006ac:	f001 fb84 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b6:	4828      	ldr	r0, [pc, #160]	; (8000758 <update7SEG+0x120>)
 80006b8:	f001 fb7e 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c2:	4825      	ldr	r0, [pc, #148]	; (8000758 <update7SEG+0x120>)
 80006c4:	f001 fb78 	bl	8001db8 <HAL_GPIO_WritePin>
		 display7SEG(led_buffer[index]);
 80006c8:	4a24      	ldr	r2, [pc, #144]	; (800075c <update7SEG+0x124>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f845 	bl	8000760 <display7SEG>
		 break;
 80006d6:	e03b      	b.n	8000750 <update7SEG+0x118>
	 }
	 case 2:
	 {
		 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	481e      	ldr	r0, [pc, #120]	; (8000758 <update7SEG+0x120>)
 80006de:	f001 fb6b 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	481c      	ldr	r0, [pc, #112]	; (8000758 <update7SEG+0x120>)
 80006e8:	f001 fb66 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f2:	4819      	ldr	r0, [pc, #100]	; (8000758 <update7SEG+0x120>)
 80006f4:	f001 fb60 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fe:	4816      	ldr	r0, [pc, #88]	; (8000758 <update7SEG+0x120>)
 8000700:	f001 fb5a 	bl	8001db8 <HAL_GPIO_WritePin>
		 display7SEG(led_buffer[index]);
 8000704:	4a15      	ldr	r2, [pc, #84]	; (800075c <update7SEG+0x124>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f827 	bl	8000760 <display7SEG>
		 break;
 8000712:	e01d      	b.n	8000750 <update7SEG+0x118>
	 }
	 case 3:
	 {
		 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	480f      	ldr	r0, [pc, #60]	; (8000758 <update7SEG+0x120>)
 800071a:	f001 fb4d 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <update7SEG+0x120>)
 8000724:	f001 fb48 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <update7SEG+0x120>)
 8000730:	f001 fb42 	bl	8001db8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <update7SEG+0x120>)
 800073c:	f001 fb3c 	bl	8001db8 <HAL_GPIO_WritePin>
		 display7SEG(led_buffer[index]);
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <update7SEG+0x124>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f809 	bl	8000760 <display7SEG>
		 break;
 800074e:	bf00      	nop
	 }
	 }
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010800 	.word	0x40010800
 800075c:	20000000 	.word	0x20000000

08000760 <display7SEG>:

void display7SEG(int num)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2101      	movs	r1, #1
 800076c:	4886      	ldr	r0, [pc, #536]	; (8000988 <display7SEG+0x228>)
 800076e:	f001 fb23 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2102      	movs	r1, #2
 8000776:	4884      	ldr	r0, [pc, #528]	; (8000988 <display7SEG+0x228>)
 8000778:	f001 fb1e 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2104      	movs	r1, #4
 8000780:	4881      	ldr	r0, [pc, #516]	; (8000988 <display7SEG+0x228>)
 8000782:	f001 fb19 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2108      	movs	r1, #8
 800078a:	487f      	ldr	r0, [pc, #508]	; (8000988 <display7SEG+0x228>)
 800078c:	f001 fb14 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	487c      	ldr	r0, [pc, #496]	; (8000988 <display7SEG+0x228>)
 8000796:	f001 fb0f 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2120      	movs	r1, #32
 800079e:	487a      	ldr	r0, [pc, #488]	; (8000988 <display7SEG+0x228>)
 80007a0:	f001 fb0a 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	4877      	ldr	r0, [pc, #476]	; (8000988 <display7SEG+0x228>)
 80007aa:	f001 fb05 	bl	8001db8 <HAL_GPIO_WritePin>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b09      	cmp	r3, #9
 80007b2:	f200 80e5 	bhi.w	8000980 <display7SEG+0x220>
 80007b6:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <display7SEG+0x5c>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007e5 	.word	0x080007e5
 80007c0:	08000817 	.word	0x08000817
 80007c4:	08000829 	.word	0x08000829
 80007c8:	08000853 	.word	0x08000853
 80007cc:	0800087d 	.word	0x0800087d
 80007d0:	0800089f 	.word	0x0800089f
 80007d4:	080008c9 	.word	0x080008c9
 80007d8:	080008fb 	.word	0x080008fb
 80007dc:	08000915 	.word	0x08000915
 80007e0:	0800094f 	.word	0x0800094f

	switch (num)
	{
	case 0:
	{
		HAL_GPIO_TogglePin(a_GPIO_Port, a_Pin);
 80007e4:	2101      	movs	r1, #1
 80007e6:	4868      	ldr	r0, [pc, #416]	; (8000988 <display7SEG+0x228>)
 80007e8:	f001 fafe 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(b_GPIO_Port, b_Pin);
 80007ec:	2102      	movs	r1, #2
 80007ee:	4866      	ldr	r0, [pc, #408]	; (8000988 <display7SEG+0x228>)
 80007f0:	f001 fafa 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(c_GPIO_Port, c_Pin);
 80007f4:	2104      	movs	r1, #4
 80007f6:	4864      	ldr	r0, [pc, #400]	; (8000988 <display7SEG+0x228>)
 80007f8:	f001 faf6 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(d_GPIO_Port, d_Pin);
 80007fc:	2108      	movs	r1, #8
 80007fe:	4862      	ldr	r0, [pc, #392]	; (8000988 <display7SEG+0x228>)
 8000800:	f001 faf2 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(e_GPIO_Port, e_Pin);
 8000804:	2110      	movs	r1, #16
 8000806:	4860      	ldr	r0, [pc, #384]	; (8000988 <display7SEG+0x228>)
 8000808:	f001 faee 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(f_GPIO_Port, f_Pin);
 800080c:	2120      	movs	r1, #32
 800080e:	485e      	ldr	r0, [pc, #376]	; (8000988 <display7SEG+0x228>)
 8000810:	f001 faea 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 8000814:	e0b4      	b.n	8000980 <display7SEG+0x220>
	}
	case 1:
	{
		HAL_GPIO_TogglePin(b_GPIO_Port, b_Pin);
 8000816:	2102      	movs	r1, #2
 8000818:	485b      	ldr	r0, [pc, #364]	; (8000988 <display7SEG+0x228>)
 800081a:	f001 fae5 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(c_GPIO_Port, c_Pin);
 800081e:	2104      	movs	r1, #4
 8000820:	4859      	ldr	r0, [pc, #356]	; (8000988 <display7SEG+0x228>)
 8000822:	f001 fae1 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 8000826:	e0ab      	b.n	8000980 <display7SEG+0x220>
	}
	case 2:
	{
		HAL_GPIO_TogglePin(a_GPIO_Port, a_Pin);
 8000828:	2101      	movs	r1, #1
 800082a:	4857      	ldr	r0, [pc, #348]	; (8000988 <display7SEG+0x228>)
 800082c:	f001 fadc 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(b_GPIO_Port, b_Pin);
 8000830:	2102      	movs	r1, #2
 8000832:	4855      	ldr	r0, [pc, #340]	; (8000988 <display7SEG+0x228>)
 8000834:	f001 fad8 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(d_GPIO_Port, d_Pin);
 8000838:	2108      	movs	r1, #8
 800083a:	4853      	ldr	r0, [pc, #332]	; (8000988 <display7SEG+0x228>)
 800083c:	f001 fad4 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(e_GPIO_Port, e_Pin);
 8000840:	2110      	movs	r1, #16
 8000842:	4851      	ldr	r0, [pc, #324]	; (8000988 <display7SEG+0x228>)
 8000844:	f001 fad0 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(g_GPIO_Port, g_Pin);
 8000848:	2140      	movs	r1, #64	; 0x40
 800084a:	484f      	ldr	r0, [pc, #316]	; (8000988 <display7SEG+0x228>)
 800084c:	f001 facc 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 8000850:	e096      	b.n	8000980 <display7SEG+0x220>
	}
	case 3:
	{
		HAL_GPIO_TogglePin(a_GPIO_Port, a_Pin);
 8000852:	2101      	movs	r1, #1
 8000854:	484c      	ldr	r0, [pc, #304]	; (8000988 <display7SEG+0x228>)
 8000856:	f001 fac7 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(b_GPIO_Port, b_Pin);
 800085a:	2102      	movs	r1, #2
 800085c:	484a      	ldr	r0, [pc, #296]	; (8000988 <display7SEG+0x228>)
 800085e:	f001 fac3 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(c_GPIO_Port, c_Pin);
 8000862:	2104      	movs	r1, #4
 8000864:	4848      	ldr	r0, [pc, #288]	; (8000988 <display7SEG+0x228>)
 8000866:	f001 fabf 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(d_GPIO_Port, d_Pin);
 800086a:	2108      	movs	r1, #8
 800086c:	4846      	ldr	r0, [pc, #280]	; (8000988 <display7SEG+0x228>)
 800086e:	f001 fabb 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(g_GPIO_Port, g_Pin);
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	4844      	ldr	r0, [pc, #272]	; (8000988 <display7SEG+0x228>)
 8000876:	f001 fab7 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 800087a:	e081      	b.n	8000980 <display7SEG+0x220>
	}
	case 4:
	{
		HAL_GPIO_TogglePin(b_GPIO_Port, b_Pin);
 800087c:	2102      	movs	r1, #2
 800087e:	4842      	ldr	r0, [pc, #264]	; (8000988 <display7SEG+0x228>)
 8000880:	f001 fab2 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(c_GPIO_Port, c_Pin);
 8000884:	2104      	movs	r1, #4
 8000886:	4840      	ldr	r0, [pc, #256]	; (8000988 <display7SEG+0x228>)
 8000888:	f001 faae 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(f_GPIO_Port, f_Pin);
 800088c:	2120      	movs	r1, #32
 800088e:	483e      	ldr	r0, [pc, #248]	; (8000988 <display7SEG+0x228>)
 8000890:	f001 faaa 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(g_GPIO_Port, g_Pin);
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	483c      	ldr	r0, [pc, #240]	; (8000988 <display7SEG+0x228>)
 8000898:	f001 faa6 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 800089c:	e070      	b.n	8000980 <display7SEG+0x220>
	}
	case 5:
	{
		HAL_GPIO_TogglePin(a_GPIO_Port, a_Pin);
 800089e:	2101      	movs	r1, #1
 80008a0:	4839      	ldr	r0, [pc, #228]	; (8000988 <display7SEG+0x228>)
 80008a2:	f001 faa1 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(c_GPIO_Port, c_Pin);
 80008a6:	2104      	movs	r1, #4
 80008a8:	4837      	ldr	r0, [pc, #220]	; (8000988 <display7SEG+0x228>)
 80008aa:	f001 fa9d 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(d_GPIO_Port, d_Pin);
 80008ae:	2108      	movs	r1, #8
 80008b0:	4835      	ldr	r0, [pc, #212]	; (8000988 <display7SEG+0x228>)
 80008b2:	f001 fa99 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(f_GPIO_Port, f_Pin);
 80008b6:	2120      	movs	r1, #32
 80008b8:	4833      	ldr	r0, [pc, #204]	; (8000988 <display7SEG+0x228>)
 80008ba:	f001 fa95 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(g_GPIO_Port, g_Pin);
 80008be:	2140      	movs	r1, #64	; 0x40
 80008c0:	4831      	ldr	r0, [pc, #196]	; (8000988 <display7SEG+0x228>)
 80008c2:	f001 fa91 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 80008c6:	e05b      	b.n	8000980 <display7SEG+0x220>
	}
	case 6:
	{
		HAL_GPIO_TogglePin(a_GPIO_Port, a_Pin);
 80008c8:	2101      	movs	r1, #1
 80008ca:	482f      	ldr	r0, [pc, #188]	; (8000988 <display7SEG+0x228>)
 80008cc:	f001 fa8c 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(c_GPIO_Port, c_Pin);
 80008d0:	2104      	movs	r1, #4
 80008d2:	482d      	ldr	r0, [pc, #180]	; (8000988 <display7SEG+0x228>)
 80008d4:	f001 fa88 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(d_GPIO_Port, d_Pin);
 80008d8:	2108      	movs	r1, #8
 80008da:	482b      	ldr	r0, [pc, #172]	; (8000988 <display7SEG+0x228>)
 80008dc:	f001 fa84 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(e_GPIO_Port, e_Pin);
 80008e0:	2110      	movs	r1, #16
 80008e2:	4829      	ldr	r0, [pc, #164]	; (8000988 <display7SEG+0x228>)
 80008e4:	f001 fa80 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(f_GPIO_Port, f_Pin);
 80008e8:	2120      	movs	r1, #32
 80008ea:	4827      	ldr	r0, [pc, #156]	; (8000988 <display7SEG+0x228>)
 80008ec:	f001 fa7c 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(g_GPIO_Port, g_Pin);
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4825      	ldr	r0, [pc, #148]	; (8000988 <display7SEG+0x228>)
 80008f4:	f001 fa78 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 80008f8:	e042      	b.n	8000980 <display7SEG+0x220>
	}
	case 7:
	{
		HAL_GPIO_TogglePin(a_GPIO_Port, a_Pin);
 80008fa:	2101      	movs	r1, #1
 80008fc:	4822      	ldr	r0, [pc, #136]	; (8000988 <display7SEG+0x228>)
 80008fe:	f001 fa73 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(b_GPIO_Port, b_Pin);
 8000902:	2102      	movs	r1, #2
 8000904:	4820      	ldr	r0, [pc, #128]	; (8000988 <display7SEG+0x228>)
 8000906:	f001 fa6f 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(c_GPIO_Port, c_Pin);
 800090a:	2104      	movs	r1, #4
 800090c:	481e      	ldr	r0, [pc, #120]	; (8000988 <display7SEG+0x228>)
 800090e:	f001 fa6b 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 8000912:	e035      	b.n	8000980 <display7SEG+0x220>
	}
	case 8:
	{
		HAL_GPIO_TogglePin(a_GPIO_Port, a_Pin);
 8000914:	2101      	movs	r1, #1
 8000916:	481c      	ldr	r0, [pc, #112]	; (8000988 <display7SEG+0x228>)
 8000918:	f001 fa66 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(b_GPIO_Port, b_Pin);
 800091c:	2102      	movs	r1, #2
 800091e:	481a      	ldr	r0, [pc, #104]	; (8000988 <display7SEG+0x228>)
 8000920:	f001 fa62 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(c_GPIO_Port, c_Pin);
 8000924:	2104      	movs	r1, #4
 8000926:	4818      	ldr	r0, [pc, #96]	; (8000988 <display7SEG+0x228>)
 8000928:	f001 fa5e 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(d_GPIO_Port, d_Pin);
 800092c:	2108      	movs	r1, #8
 800092e:	4816      	ldr	r0, [pc, #88]	; (8000988 <display7SEG+0x228>)
 8000930:	f001 fa5a 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(e_GPIO_Port, e_Pin);
 8000934:	2110      	movs	r1, #16
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <display7SEG+0x228>)
 8000938:	f001 fa56 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(f_GPIO_Port, f_Pin);
 800093c:	2120      	movs	r1, #32
 800093e:	4812      	ldr	r0, [pc, #72]	; (8000988 <display7SEG+0x228>)
 8000940:	f001 fa52 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(g_GPIO_Port, g_Pin);
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	4810      	ldr	r0, [pc, #64]	; (8000988 <display7SEG+0x228>)
 8000948:	f001 fa4e 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 800094c:	e018      	b.n	8000980 <display7SEG+0x220>
	}
	case 9:
	{
		HAL_GPIO_TogglePin(a_GPIO_Port, a_Pin);
 800094e:	2101      	movs	r1, #1
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <display7SEG+0x228>)
 8000952:	f001 fa49 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(b_GPIO_Port, b_Pin);
 8000956:	2102      	movs	r1, #2
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <display7SEG+0x228>)
 800095a:	f001 fa45 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(c_GPIO_Port, c_Pin);
 800095e:	2104      	movs	r1, #4
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <display7SEG+0x228>)
 8000962:	f001 fa41 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(d_GPIO_Port, d_Pin);
 8000966:	2108      	movs	r1, #8
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <display7SEG+0x228>)
 800096a:	f001 fa3d 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(f_GPIO_Port, f_Pin);
 800096e:	2120      	movs	r1, #32
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <display7SEG+0x228>)
 8000972:	f001 fa39 	bl	8001de8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(g_GPIO_Port, g_Pin);
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <display7SEG+0x228>)
 800097a:	f001 fa35 	bl	8001de8 <HAL_GPIO_TogglePin>
		break;
 800097e:	bf00      	nop
	}
	}
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40010c00 	.word	0x40010c00

0800098c <resetLEDMatrix>:

void resetLEDMatrix(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	4817      	ldr	r0, [pc, #92]	; (80009f4 <resetLEDMatrix+0x68>)
 8000998:	f001 fa0e 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <resetLEDMatrix+0x68>)
 80009a4:	f001 fa08 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <resetLEDMatrix+0x68>)
 80009b0:	f001 fa02 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <resetLEDMatrix+0x68>)
 80009bc:	f001 f9fc 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <resetLEDMatrix+0x68>)
 80009c8:	f001 f9f6 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d2:	4808      	ldr	r0, [pc, #32]	; (80009f4 <resetLEDMatrix+0x68>)
 80009d4:	f001 f9f0 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <resetLEDMatrix+0x68>)
 80009e0:	f001 f9ea 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ea:	4802      	ldr	r0, [pc, #8]	; (80009f4 <resetLEDMatrix+0x68>)
 80009ec:	f001 f9e4 	bl	8001db8 <HAL_GPIO_WritePin>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <updateLEDMatrix>:

void updateLEDMatrix(int index)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b07      	cmp	r3, #7
 8000a04:	d85a      	bhi.n	8000abc <updateLEDMatrix+0xc4>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <updateLEDMatrix+0x14>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a2d 	.word	0x08000a2d
 8000a10:	08000a3f 	.word	0x08000a3f
 8000a14:	08000a51 	.word	0x08000a51
 8000a18:	08000a63 	.word	0x08000a63
 8000a1c:	08000a75 	.word	0x08000a75
 8000a20:	08000a87 	.word	0x08000a87
 8000a24:	08000a99 	.word	0x08000a99
 8000a28:	08000aab 	.word	0x08000aab
	switch (index)
	{
	case 0:
	{
		displayLEDMatrix(index, matrix_buffer[index]);
 8000a2c:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <updateLEDMatrix+0xcc>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f846 	bl	8000ac8 <displayLEDMatrix>
		break;
 8000a3c:	e03e      	b.n	8000abc <updateLEDMatrix+0xc4>
	}
	case 1:
	{
		displayLEDMatrix(index, matrix_buffer[index]);
 8000a3e:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <updateLEDMatrix+0xcc>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4413      	add	r3, r2
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f83d 	bl	8000ac8 <displayLEDMatrix>
		break;
 8000a4e:	e035      	b.n	8000abc <updateLEDMatrix+0xc4>
	}
	case 2:
	{
		displayLEDMatrix(index, matrix_buffer[index]);
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <updateLEDMatrix+0xcc>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 f834 	bl	8000ac8 <displayLEDMatrix>
		break;
 8000a60:	e02c      	b.n	8000abc <updateLEDMatrix+0xc4>
	}
	case 3:
	{
		displayLEDMatrix(index, matrix_buffer[index]);
 8000a62:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <updateLEDMatrix+0xcc>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 f82b 	bl	8000ac8 <displayLEDMatrix>
		break;
 8000a72:	e023      	b.n	8000abc <updateLEDMatrix+0xc4>
	}
	case 4:
	{
		displayLEDMatrix(index, matrix_buffer[index]);
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <updateLEDMatrix+0xcc>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 f822 	bl	8000ac8 <displayLEDMatrix>
		break;
 8000a84:	e01a      	b.n	8000abc <updateLEDMatrix+0xc4>
	}
	case 5:
	{
		displayLEDMatrix(index, matrix_buffer[index]);
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <updateLEDMatrix+0xcc>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 f819 	bl	8000ac8 <displayLEDMatrix>
		break;
 8000a96:	e011      	b.n	8000abc <updateLEDMatrix+0xc4>
	}
	case 6:
	{
		displayLEDMatrix(index, matrix_buffer[index]);
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <updateLEDMatrix+0xcc>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f810 	bl	8000ac8 <displayLEDMatrix>
		break;
 8000aa8:	e008      	b.n	8000abc <updateLEDMatrix+0xc4>
	}
	case 7:
	{
		displayLEDMatrix(index, matrix_buffer[index]);
 8000aaa:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <updateLEDMatrix+0xcc>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f807 	bl	8000ac8 <displayLEDMatrix>
		break;
 8000aba:	bf00      	nop
	}
	}
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000010 	.word	0x20000010

08000ac8 <displayLEDMatrix>:

void displayLEDMatrix(int row, uint8_t col)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b07      	cmp	r3, #7
 8000ad8:	f200 85c2 	bhi.w	8001660 <displayLEDMatrix+0xb98>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <displayLEDMatrix+0x1c>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000b05 	.word	0x08000b05
 8000ae8:	08000c6f 	.word	0x08000c6f
 8000aec:	08000de1 	.word	0x08000de1
 8000af0:	08000f49 	.word	0x08000f49
 8000af4:	080010b9 	.word	0x080010b9
 8000af8:	08001221 	.word	0x08001221
 8000afc:	08001391 	.word	0x08001391
 8000b00:	080014f9 	.word	0x080014f9
	switch (row)
	{
	case 0:
	{
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0a:	48b3      	ldr	r0, [pc, #716]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000b0c:	f001 f954 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b16:	48b0      	ldr	r0, [pc, #704]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000b18:	f001 f94e 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b22:	48ad      	ldr	r0, [pc, #692]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000b24:	f001 f948 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2e:	48aa      	ldr	r0, [pc, #680]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000b30:	f001 f942 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3a:	48a7      	ldr	r0, [pc, #668]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000b3c:	f001 f93c 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b46:	48a4      	ldr	r0, [pc, #656]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000b48:	f001 f936 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b52:	48a1      	ldr	r0, [pc, #644]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000b54:	f001 f930 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	489e      	ldr	r0, [pc, #632]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000b60:	f001 f92a 	bl	8001db8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, (col & 0x01) ^ 0x01);
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf0c      	ite	eq
 8000b6e:	2301      	moveq	r3, #1
 8000b70:	2300      	movne	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7a:	4898      	ldr	r0, [pc, #608]	; (8000ddc <displayLEDMatrix+0x314>)
 8000b7c:	f001 f91c 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	085b      	lsrs	r3, r3, #1
 8000b84:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, (col & 0x01) ^ 0x01);
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf0c      	ite	eq
 8000b90:	2301      	moveq	r3, #1
 8000b92:	2300      	movne	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	461a      	mov	r2, r3
 8000b98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9c:	488f      	ldr	r0, [pc, #572]	; (8000ddc <displayLEDMatrix+0x314>)
 8000b9e:	f001 f90b 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	085b      	lsrs	r3, r3, #1
 8000ba6:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, (col & 0x01) ^ 0x01);
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2301      	moveq	r3, #1
 8000bb4:	2300      	movne	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbe:	4887      	ldr	r0, [pc, #540]	; (8000ddc <displayLEDMatrix+0x314>)
 8000bc0:	f001 f8fa 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, (col & 0x01) ^ 0x01);
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf0c      	ite	eq
 8000bd4:	2301      	moveq	r3, #1
 8000bd6:	2300      	movne	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be0:	487e      	ldr	r0, [pc, #504]	; (8000ddc <displayLEDMatrix+0x314>)
 8000be2:	f001 f8e9 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	085b      	lsrs	r3, r3, #1
 8000bea:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, (col & 0x01) ^ 0x01);
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf0c      	ite	eq
 8000bf6:	2301      	moveq	r3, #1
 8000bf8:	2300      	movne	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c02:	4876      	ldr	r0, [pc, #472]	; (8000ddc <displayLEDMatrix+0x314>)
 8000c04:	f001 f8d8 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	085b      	lsrs	r3, r3, #1
 8000c0c:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, (col & 0x01) ^ 0x01);
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf0c      	ite	eq
 8000c18:	2301      	moveq	r3, #1
 8000c1a:	2300      	movne	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c24:	486d      	ldr	r0, [pc, #436]	; (8000ddc <displayLEDMatrix+0x314>)
 8000c26:	f001 f8c7 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	085b      	lsrs	r3, r3, #1
 8000c2e:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, (col & 0x01) ^ 0x01);
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bf0c      	ite	eq
 8000c3a:	2301      	moveq	r3, #1
 8000c3c:	2300      	movne	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	2108      	movs	r1, #8
 8000c44:	4865      	ldr	r0, [pc, #404]	; (8000ddc <displayLEDMatrix+0x314>)
 8000c46:	f001 f8b7 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000c4a:	78fb      	ldrb	r3, [r7, #3]
 8000c4c:	085b      	lsrs	r3, r3, #1
 8000c4e:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, (col & 0x01) ^ 0x01);
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bf0c      	ite	eq
 8000c5a:	2301      	moveq	r3, #1
 8000c5c:	2300      	movne	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	2104      	movs	r1, #4
 8000c64:	485d      	ldr	r0, [pc, #372]	; (8000ddc <displayLEDMatrix+0x314>)
 8000c66:	f001 f8a7 	bl	8001db8 <HAL_GPIO_WritePin>
		break;
 8000c6a:	f000 bcf9 	b.w	8001660 <displayLEDMatrix+0xb98>
	}
	case 1:
	{
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c74:	4858      	ldr	r0, [pc, #352]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000c76:	f001 f89f 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c80:	4855      	ldr	r0, [pc, #340]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000c82:	f001 f899 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8c:	4852      	ldr	r0, [pc, #328]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000c8e:	f001 f893 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c98:	484f      	ldr	r0, [pc, #316]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000c9a:	f001 f88d 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca4:	484c      	ldr	r0, [pc, #304]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000ca6:	f001 f887 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	4849      	ldr	r0, [pc, #292]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000cb2:	f001 f881 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbc:	4846      	ldr	r0, [pc, #280]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000cbe:	f001 f87b 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc8:	4843      	ldr	r0, [pc, #268]	; (8000dd8 <displayLEDMatrix+0x310>)
 8000cca:	f001 f875 	bl	8001db8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, (col & 0x01) ^ 0x01);
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2301      	moveq	r3, #1
 8000cda:	2300      	movne	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce4:	483d      	ldr	r0, [pc, #244]	; (8000ddc <displayLEDMatrix+0x314>)
 8000ce6:	f001 f867 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000cea:	78fb      	ldrb	r3, [r7, #3]
 8000cec:	085b      	lsrs	r3, r3, #1
 8000cee:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, (col & 0x01) ^ 0x01);
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2301      	moveq	r3, #1
 8000cfc:	2300      	movne	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d06:	4835      	ldr	r0, [pc, #212]	; (8000ddc <displayLEDMatrix+0x314>)
 8000d08:	f001 f856 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	085b      	lsrs	r3, r3, #1
 8000d10:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, (col & 0x01) ^ 0x01);
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf0c      	ite	eq
 8000d1c:	2301      	moveq	r3, #1
 8000d1e:	2300      	movne	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d28:	482c      	ldr	r0, [pc, #176]	; (8000ddc <displayLEDMatrix+0x314>)
 8000d2a:	f001 f845 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	085b      	lsrs	r3, r3, #1
 8000d32:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, (col & 0x01) ^ 0x01);
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bf0c      	ite	eq
 8000d3e:	2301      	moveq	r3, #1
 8000d40:	2300      	movne	r3, #0
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4a:	4824      	ldr	r0, [pc, #144]	; (8000ddc <displayLEDMatrix+0x314>)
 8000d4c:	f001 f834 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	085b      	lsrs	r3, r3, #1
 8000d54:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, (col & 0x01) ^ 0x01);
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf0c      	ite	eq
 8000d60:	2301      	moveq	r3, #1
 8000d62:	2300      	movne	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <displayLEDMatrix+0x314>)
 8000d6e:	f001 f823 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	085b      	lsrs	r3, r3, #1
 8000d76:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, (col & 0x01) ^ 0x01);
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf0c      	ite	eq
 8000d82:	2301      	moveq	r3, #1
 8000d84:	2300      	movne	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8e:	4813      	ldr	r0, [pc, #76]	; (8000ddc <displayLEDMatrix+0x314>)
 8000d90:	f001 f812 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	085b      	lsrs	r3, r3, #1
 8000d98:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, (col & 0x01) ^ 0x01);
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf0c      	ite	eq
 8000da4:	2301      	moveq	r3, #1
 8000da6:	2300      	movne	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	2108      	movs	r1, #8
 8000dae:	480b      	ldr	r0, [pc, #44]	; (8000ddc <displayLEDMatrix+0x314>)
 8000db0:	f001 f802 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	085b      	lsrs	r3, r3, #1
 8000db8:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, (col & 0x01) ^ 0x01);
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2104      	movs	r1, #4
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <displayLEDMatrix+0x314>)
 8000dd0:	f000 fff2 	bl	8001db8 <HAL_GPIO_WritePin>
		break;
 8000dd4:	f000 bc44 	b.w	8001660 <displayLEDMatrix+0xb98>
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	40010800 	.word	0x40010800
	}
	case 2:
	{
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de6:	48b2      	ldr	r0, [pc, #712]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000de8:	f000 ffe6 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df2:	48af      	ldr	r0, [pc, #700]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000df4:	f000 ffe0 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfe:	48ac      	ldr	r0, [pc, #688]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000e00:	f000 ffda 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0a:	48a9      	ldr	r0, [pc, #676]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000e0c:	f000 ffd4 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e16:	48a6      	ldr	r0, [pc, #664]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000e18:	f000 ffce 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e22:	48a3      	ldr	r0, [pc, #652]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000e24:	f000 ffc8 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2e:	48a0      	ldr	r0, [pc, #640]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000e30:	f000 ffc2 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3a:	489d      	ldr	r0, [pc, #628]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000e3c:	f000 ffbc 	bl	8001db8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, (col & 0x01) ^ 0x01);
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e56:	4897      	ldr	r0, [pc, #604]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000e58:	f000 ffae 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	085b      	lsrs	r3, r3, #1
 8000e60:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, (col & 0x01) ^ 0x01);
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf0c      	ite	eq
 8000e6c:	2301      	moveq	r3, #1
 8000e6e:	2300      	movne	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e78:	488e      	ldr	r0, [pc, #568]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000e7a:	f000 ff9d 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, (col & 0x01) ^ 0x01);
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	4886      	ldr	r0, [pc, #536]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000e9c:	f000 ff8c 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	085b      	lsrs	r3, r3, #1
 8000ea4:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, (col & 0x01) ^ 0x01);
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ebc:	487d      	ldr	r0, [pc, #500]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000ebe:	f000 ff7b 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	085b      	lsrs	r3, r3, #1
 8000ec6:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, (col & 0x01) ^ 0x01);
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ede:	4875      	ldr	r0, [pc, #468]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000ee0:	f000 ff6a 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, (col & 0x01) ^ 0x01);
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf0c      	ite	eq
 8000ef4:	2301      	moveq	r3, #1
 8000ef6:	2300      	movne	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f00:	486c      	ldr	r0, [pc, #432]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000f02:	f000 ff59 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	085b      	lsrs	r3, r3, #1
 8000f0a:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, (col & 0x01) ^ 0x01);
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bf0c      	ite	eq
 8000f16:	2301      	moveq	r3, #1
 8000f18:	2300      	movne	r3, #0
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2108      	movs	r1, #8
 8000f20:	4864      	ldr	r0, [pc, #400]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000f22:	f000 ff49 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	085b      	lsrs	r3, r3, #1
 8000f2a:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, (col & 0x01) ^ 0x01);
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf0c      	ite	eq
 8000f36:	2301      	moveq	r3, #1
 8000f38:	2300      	movne	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2104      	movs	r1, #4
 8000f40:	485c      	ldr	r0, [pc, #368]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000f42:	f000 ff39 	bl	8001db8 <HAL_GPIO_WritePin>
		break;
 8000f46:	e38b      	b.n	8001660 <displayLEDMatrix+0xb98>
	}
	case 3:
	{
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4e:	4858      	ldr	r0, [pc, #352]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000f50:	f000 ff32 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5a:	4855      	ldr	r0, [pc, #340]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000f5c:	f000 ff2c 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f66:	4852      	ldr	r0, [pc, #328]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000f68:	f000 ff26 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f72:	484f      	ldr	r0, [pc, #316]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000f74:	f000 ff20 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7e:	484c      	ldr	r0, [pc, #304]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000f80:	f000 ff1a 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8a:	4849      	ldr	r0, [pc, #292]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000f8c:	f000 ff14 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f96:	4846      	ldr	r0, [pc, #280]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000f98:	f000 ff0e 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa2:	4843      	ldr	r0, [pc, #268]	; (80010b0 <displayLEDMatrix+0x5e8>)
 8000fa4:	f000 ff08 	bl	8001db8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, (col & 0x01) ^ 0x01);
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbe:	483d      	ldr	r0, [pc, #244]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000fc0:	f000 fefa 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	085b      	lsrs	r3, r3, #1
 8000fc8:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, (col & 0x01) ^ 0x01);
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe0:	4834      	ldr	r0, [pc, #208]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8000fe2:	f000 fee9 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	085b      	lsrs	r3, r3, #1
 8000fea:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, (col & 0x01) ^ 0x01);
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001002:	482c      	ldr	r0, [pc, #176]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8001004:	f000 fed8 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	085b      	lsrs	r3, r3, #1
 800100c:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, (col & 0x01) ^ 0x01);
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001024:	4823      	ldr	r0, [pc, #140]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8001026:	f000 fec7 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	085b      	lsrs	r3, r3, #1
 800102e:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, (col & 0x01) ^ 0x01);
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001046:	481b      	ldr	r0, [pc, #108]	; (80010b4 <displayLEDMatrix+0x5ec>)
 8001048:	f000 feb6 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	085b      	lsrs	r3, r3, #1
 8001050:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, (col & 0x01) ^ 0x01);
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf0c      	ite	eq
 800105c:	2301      	moveq	r3, #1
 800105e:	2300      	movne	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <displayLEDMatrix+0x5ec>)
 800106a:	f000 fea5 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	085b      	lsrs	r3, r3, #1
 8001072:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, (col & 0x01) ^ 0x01);
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	bf0c      	ite	eq
 800107e:	2301      	moveq	r3, #1
 8001080:	2300      	movne	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	2108      	movs	r1, #8
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <displayLEDMatrix+0x5ec>)
 800108a:	f000 fe95 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	085b      	lsrs	r3, r3, #1
 8001092:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, (col & 0x01) ^ 0x01);
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	2104      	movs	r1, #4
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <displayLEDMatrix+0x5ec>)
 80010aa:	f000 fe85 	bl	8001db8 <HAL_GPIO_WritePin>
		break;
 80010ae:	e2d7      	b.n	8001660 <displayLEDMatrix+0xb98>
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	40010800 	.word	0x40010800
	}
	case 4:
	{
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010be:	48b2      	ldr	r0, [pc, #712]	; (8001388 <displayLEDMatrix+0x8c0>)
 80010c0:	f000 fe7a 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ca:	48af      	ldr	r0, [pc, #700]	; (8001388 <displayLEDMatrix+0x8c0>)
 80010cc:	f000 fe74 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d6:	48ac      	ldr	r0, [pc, #688]	; (8001388 <displayLEDMatrix+0x8c0>)
 80010d8:	f000 fe6e 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e2:	48a9      	ldr	r0, [pc, #676]	; (8001388 <displayLEDMatrix+0x8c0>)
 80010e4:	f000 fe68 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ee:	48a6      	ldr	r0, [pc, #664]	; (8001388 <displayLEDMatrix+0x8c0>)
 80010f0:	f000 fe62 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fa:	48a3      	ldr	r0, [pc, #652]	; (8001388 <displayLEDMatrix+0x8c0>)
 80010fc:	f000 fe5c 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001106:	48a0      	ldr	r0, [pc, #640]	; (8001388 <displayLEDMatrix+0x8c0>)
 8001108:	f000 fe56 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001112:	489d      	ldr	r0, [pc, #628]	; (8001388 <displayLEDMatrix+0x8c0>)
 8001114:	f000 fe50 	bl	8001db8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, (col & 0x01) ^ 0x01);
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112e:	4897      	ldr	r0, [pc, #604]	; (800138c <displayLEDMatrix+0x8c4>)
 8001130:	f000 fe42 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, (col & 0x01) ^ 0x01);
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001150:	488e      	ldr	r0, [pc, #568]	; (800138c <displayLEDMatrix+0x8c4>)
 8001152:	f000 fe31 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	085b      	lsrs	r3, r3, #1
 800115a:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, (col & 0x01) ^ 0x01);
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf0c      	ite	eq
 8001166:	2301      	moveq	r3, #1
 8001168:	2300      	movne	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001172:	4886      	ldr	r0, [pc, #536]	; (800138c <displayLEDMatrix+0x8c4>)
 8001174:	f000 fe20 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	085b      	lsrs	r3, r3, #1
 800117c:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, (col & 0x01) ^ 0x01);
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf0c      	ite	eq
 8001188:	2301      	moveq	r3, #1
 800118a:	2300      	movne	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001194:	487d      	ldr	r0, [pc, #500]	; (800138c <displayLEDMatrix+0x8c4>)
 8001196:	f000 fe0f 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	085b      	lsrs	r3, r3, #1
 800119e:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, (col & 0x01) ^ 0x01);
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf0c      	ite	eq
 80011aa:	2301      	moveq	r3, #1
 80011ac:	2300      	movne	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b6:	4875      	ldr	r0, [pc, #468]	; (800138c <displayLEDMatrix+0x8c4>)
 80011b8:	f000 fdfe 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	085b      	lsrs	r3, r3, #1
 80011c0:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, (col & 0x01) ^ 0x01);
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf0c      	ite	eq
 80011cc:	2301      	moveq	r3, #1
 80011ce:	2300      	movne	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d8:	486c      	ldr	r0, [pc, #432]	; (800138c <displayLEDMatrix+0x8c4>)
 80011da:	f000 fded 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	085b      	lsrs	r3, r3, #1
 80011e2:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, (col & 0x01) ^ 0x01);
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	2108      	movs	r1, #8
 80011f8:	4864      	ldr	r0, [pc, #400]	; (800138c <displayLEDMatrix+0x8c4>)
 80011fa:	f000 fddd 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	085b      	lsrs	r3, r3, #1
 8001202:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, (col & 0x01) ^ 0x01);
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	2104      	movs	r1, #4
 8001218:	485c      	ldr	r0, [pc, #368]	; (800138c <displayLEDMatrix+0x8c4>)
 800121a:	f000 fdcd 	bl	8001db8 <HAL_GPIO_WritePin>
		break;
 800121e:	e21f      	b.n	8001660 <displayLEDMatrix+0xb98>
	}
	case 5:
	{
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001226:	4858      	ldr	r0, [pc, #352]	; (8001388 <displayLEDMatrix+0x8c0>)
 8001228:	f000 fdc6 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001232:	4855      	ldr	r0, [pc, #340]	; (8001388 <displayLEDMatrix+0x8c0>)
 8001234:	f000 fdc0 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123e:	4852      	ldr	r0, [pc, #328]	; (8001388 <displayLEDMatrix+0x8c0>)
 8001240:	f000 fdba 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124a:	484f      	ldr	r0, [pc, #316]	; (8001388 <displayLEDMatrix+0x8c0>)
 800124c:	f000 fdb4 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001256:	484c      	ldr	r0, [pc, #304]	; (8001388 <displayLEDMatrix+0x8c0>)
 8001258:	f000 fdae 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001262:	4849      	ldr	r0, [pc, #292]	; (8001388 <displayLEDMatrix+0x8c0>)
 8001264:	f000 fda8 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126e:	4846      	ldr	r0, [pc, #280]	; (8001388 <displayLEDMatrix+0x8c0>)
 8001270:	f000 fda2 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127a:	4843      	ldr	r0, [pc, #268]	; (8001388 <displayLEDMatrix+0x8c0>)
 800127c:	f000 fd9c 	bl	8001db8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, (col & 0x01) ^ 0x01);
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001296:	483d      	ldr	r0, [pc, #244]	; (800138c <displayLEDMatrix+0x8c4>)
 8001298:	f000 fd8e 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	085b      	lsrs	r3, r3, #1
 80012a0:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, (col & 0x01) ^ 0x01);
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b8:	4834      	ldr	r0, [pc, #208]	; (800138c <displayLEDMatrix+0x8c4>)
 80012ba:	f000 fd7d 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	085b      	lsrs	r3, r3, #1
 80012c2:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, (col & 0x01) ^ 0x01);
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012da:	482c      	ldr	r0, [pc, #176]	; (800138c <displayLEDMatrix+0x8c4>)
 80012dc:	f000 fd6c 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	085b      	lsrs	r3, r3, #1
 80012e4:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, (col & 0x01) ^ 0x01);
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf0c      	ite	eq
 80012f0:	2301      	moveq	r3, #1
 80012f2:	2300      	movne	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fc:	4823      	ldr	r0, [pc, #140]	; (800138c <displayLEDMatrix+0x8c4>)
 80012fe:	f000 fd5b 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, (col & 0x01) ^ 0x01);
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131e:	481b      	ldr	r0, [pc, #108]	; (800138c <displayLEDMatrix+0x8c4>)
 8001320:	f000 fd4a 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	085b      	lsrs	r3, r3, #1
 8001328:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, (col & 0x01) ^ 0x01);
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001340:	4812      	ldr	r0, [pc, #72]	; (800138c <displayLEDMatrix+0x8c4>)
 8001342:	f000 fd39 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	085b      	lsrs	r3, r3, #1
 800134a:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, (col & 0x01) ^ 0x01);
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	2108      	movs	r1, #8
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <displayLEDMatrix+0x8c4>)
 8001362:	f000 fd29 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, (col & 0x01) ^ 0x01);
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	2104      	movs	r1, #4
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <displayLEDMatrix+0x8c4>)
 8001382:	f000 fd19 	bl	8001db8 <HAL_GPIO_WritePin>
		break;
 8001386:	e16b      	b.n	8001660 <displayLEDMatrix+0xb98>
 8001388:	40010c00 	.word	0x40010c00
 800138c:	40010800 	.word	0x40010800
	}
	case 6:
	{
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001396:	48b4      	ldr	r0, [pc, #720]	; (8001668 <displayLEDMatrix+0xba0>)
 8001398:	f000 fd0e 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a2:	48b1      	ldr	r0, [pc, #708]	; (8001668 <displayLEDMatrix+0xba0>)
 80013a4:	f000 fd08 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ae:	48ae      	ldr	r0, [pc, #696]	; (8001668 <displayLEDMatrix+0xba0>)
 80013b0:	f000 fd02 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ba:	48ab      	ldr	r0, [pc, #684]	; (8001668 <displayLEDMatrix+0xba0>)
 80013bc:	f000 fcfc 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c6:	48a8      	ldr	r0, [pc, #672]	; (8001668 <displayLEDMatrix+0xba0>)
 80013c8:	f000 fcf6 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d2:	48a5      	ldr	r0, [pc, #660]	; (8001668 <displayLEDMatrix+0xba0>)
 80013d4:	f000 fcf0 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013de:	48a2      	ldr	r0, [pc, #648]	; (8001668 <displayLEDMatrix+0xba0>)
 80013e0:	f000 fcea 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ea:	489f      	ldr	r0, [pc, #636]	; (8001668 <displayLEDMatrix+0xba0>)
 80013ec:	f000 fce4 	bl	8001db8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, (col & 0x01) ^ 0x01);
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf0c      	ite	eq
 80013fa:	2301      	moveq	r3, #1
 80013fc:	2300      	movne	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001406:	4899      	ldr	r0, [pc, #612]	; (800166c <displayLEDMatrix+0xba4>)
 8001408:	f000 fcd6 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	085b      	lsrs	r3, r3, #1
 8001410:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, (col & 0x01) ^ 0x01);
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001428:	4890      	ldr	r0, [pc, #576]	; (800166c <displayLEDMatrix+0xba4>)
 800142a:	f000 fcc5 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	085b      	lsrs	r3, r3, #1
 8001432:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, (col & 0x01) ^ 0x01);
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144a:	4888      	ldr	r0, [pc, #544]	; (800166c <displayLEDMatrix+0xba4>)
 800144c:	f000 fcb4 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	085b      	lsrs	r3, r3, #1
 8001454:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, (col & 0x01) ^ 0x01);
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf0c      	ite	eq
 8001460:	2301      	moveq	r3, #1
 8001462:	2300      	movne	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146c:	487f      	ldr	r0, [pc, #508]	; (800166c <displayLEDMatrix+0xba4>)
 800146e:	f000 fca3 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, (col & 0x01) ^ 0x01);
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148e:	4877      	ldr	r0, [pc, #476]	; (800166c <displayLEDMatrix+0xba4>)
 8001490:	f000 fc92 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	085b      	lsrs	r3, r3, #1
 8001498:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, (col & 0x01) ^ 0x01);
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b0:	486e      	ldr	r0, [pc, #440]	; (800166c <displayLEDMatrix+0xba4>)
 80014b2:	f000 fc81 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, (col & 0x01) ^ 0x01);
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf0c      	ite	eq
 80014c6:	2301      	moveq	r3, #1
 80014c8:	2300      	movne	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	2108      	movs	r1, #8
 80014d0:	4866      	ldr	r0, [pc, #408]	; (800166c <displayLEDMatrix+0xba4>)
 80014d2:	f000 fc71 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, (col & 0x01) ^ 0x01);
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bf0c      	ite	eq
 80014e6:	2301      	moveq	r3, #1
 80014e8:	2300      	movne	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	2104      	movs	r1, #4
 80014f0:	485e      	ldr	r0, [pc, #376]	; (800166c <displayLEDMatrix+0xba4>)
 80014f2:	f000 fc61 	bl	8001db8 <HAL_GPIO_WritePin>
		break;
 80014f6:	e0b3      	b.n	8001660 <displayLEDMatrix+0xb98>
	}
	case 7:
	{
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fe:	485a      	ldr	r0, [pc, #360]	; (8001668 <displayLEDMatrix+0xba0>)
 8001500:	f000 fc5a 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150a:	4857      	ldr	r0, [pc, #348]	; (8001668 <displayLEDMatrix+0xba0>)
 800150c:	f000 fc54 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001516:	4854      	ldr	r0, [pc, #336]	; (8001668 <displayLEDMatrix+0xba0>)
 8001518:	f000 fc4e 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001522:	4851      	ldr	r0, [pc, #324]	; (8001668 <displayLEDMatrix+0xba0>)
 8001524:	f000 fc48 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800152e:	484e      	ldr	r0, [pc, #312]	; (8001668 <displayLEDMatrix+0xba0>)
 8001530:	f000 fc42 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153a:	484b      	ldr	r0, [pc, #300]	; (8001668 <displayLEDMatrix+0xba0>)
 800153c:	f000 fc3c 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001546:	4848      	ldr	r0, [pc, #288]	; (8001668 <displayLEDMatrix+0xba0>)
 8001548:	f000 fc36 	bl	8001db8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001552:	4845      	ldr	r0, [pc, #276]	; (8001668 <displayLEDMatrix+0xba0>)
 8001554:	f000 fc30 	bl	8001db8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, (col & 0x01) ^ 0x01);
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf0c      	ite	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	2300      	movne	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800156e:	483f      	ldr	r0, [pc, #252]	; (800166c <displayLEDMatrix+0xba4>)
 8001570:	f000 fc22 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	085b      	lsrs	r3, r3, #1
 8001578:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, (col & 0x01) ^ 0x01);
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001590:	4836      	ldr	r0, [pc, #216]	; (800166c <displayLEDMatrix+0xba4>)
 8001592:	f000 fc11 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, (col & 0x01) ^ 0x01);
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b2:	482e      	ldr	r0, [pc, #184]	; (800166c <displayLEDMatrix+0xba4>)
 80015b4:	f000 fc00 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, (col & 0x01) ^ 0x01);
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d4:	4825      	ldr	r0, [pc, #148]	; (800166c <displayLEDMatrix+0xba4>)
 80015d6:	f000 fbef 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, (col & 0x01) ^ 0x01);
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf0c      	ite	eq
 80015ea:	2301      	moveq	r3, #1
 80015ec:	2300      	movne	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f6:	481d      	ldr	r0, [pc, #116]	; (800166c <displayLEDMatrix+0xba4>)
 80015f8:	f000 fbde 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, (col & 0x01) ^ 0x01);
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001618:	4814      	ldr	r0, [pc, #80]	; (800166c <displayLEDMatrix+0xba4>)
 800161a:	f000 fbcd 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, (col & 0x01) ^ 0x01);
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	2108      	movs	r1, #8
 8001638:	480c      	ldr	r0, [pc, #48]	; (800166c <displayLEDMatrix+0xba4>)
 800163a:	f000 fbbd 	bl	8001db8 <HAL_GPIO_WritePin>
		col = col >> 1;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, (col & 0x01) ^ 0x01);
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	2104      	movs	r1, #4
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <displayLEDMatrix+0xba4>)
 800165a:	f000 fbad 	bl	8001db8 <HAL_GPIO_WritePin>
		break;
 800165e:	bf00      	nop
	}
	}
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40010c00 	.word	0x40010c00
 800166c:	40010800 	.word	0x40010800

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_MspInit+0x5c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_MspInit+0x5c>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x5c>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x5c>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_MspInit+0x60>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_MspInit+0x60>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d113      	bne.n	800171a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_TIM_Base_MspInit+0x44>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_TIM_Base_MspInit+0x44>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_TIM_Base_MspInit+0x44>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	201c      	movs	r0, #28
 8001710:	f000 f9a1 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001714:	201c      	movs	r0, #28
 8001716:	f000 f9ba 	bl	8001a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172c:	e7fe      	b.n	800172c <NMI_Handler+0x4>

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176e:	f000 f87f 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM2_IRQHandler+0x10>)
 800177e:	f000 ffc5 	bl	800270c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000068 	.word	0x20000068

0800178c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001798:	f7ff fff8 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800179e:	490c      	ldr	r1, [pc, #48]	; (80017d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017b4:	4c09      	ldr	r4, [pc, #36]	; (80017dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c2:	f001 fae3 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c6:	f7fe fd51 	bl	800026c <main>
  bx lr
 80017ca:	4770      	bx	lr
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80017d4:	08002e28 	.word	0x08002e28
  ldr r2, =_sbss
 80017d8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80017dc:	200000b4 	.word	0x200000b4

080017e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_2_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x28>)
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f923 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	200f      	movs	r0, #15
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff ff3c 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f93b 	bl	8001aaa <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 f903 	bl	8001a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000028 	.word	0x20000028
 8001868:	20000030 	.word	0x20000030
 800186c:	2000002c 	.word	0x2000002c

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x1c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_IncTick+0x20>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a03      	ldr	r2, [pc, #12]	; (8001890 <HAL_IncTick+0x20>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000030 	.word	0x20000030
 8001890:	200000b0 	.word	0x200000b0

08001894 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <HAL_GetTick+0x10>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	200000b0 	.word	0x200000b0

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4906      	ldr	r1, [pc, #24]	; (8001940 <__NVIC_EnableIRQ+0x34>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f7ff ff90 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff2d 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff42 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff90 	bl	8001998 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5f 	bl	8001944 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff35 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffa2 	bl	80019fc <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b08b      	sub	sp, #44	; 0x2c
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad6:	e148      	b.n	8001d6a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f040 8137 	bne.w	8001d64 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4aa3      	ldr	r2, [pc, #652]	; (8001d88 <HAL_GPIO_Init+0x2c4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d05e      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b00:	4aa1      	ldr	r2, [pc, #644]	; (8001d88 <HAL_GPIO_Init+0x2c4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d875      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b06:	4aa1      	ldr	r2, [pc, #644]	; (8001d8c <HAL_GPIO_Init+0x2c8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d058      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b0c:	4a9f      	ldr	r2, [pc, #636]	; (8001d8c <HAL_GPIO_Init+0x2c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d86f      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b12:	4a9f      	ldr	r2, [pc, #636]	; (8001d90 <HAL_GPIO_Init+0x2cc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d052      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b18:	4a9d      	ldr	r2, [pc, #628]	; (8001d90 <HAL_GPIO_Init+0x2cc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d869      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b1e:	4a9d      	ldr	r2, [pc, #628]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d04c      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b24:	4a9b      	ldr	r2, [pc, #620]	; (8001d94 <HAL_GPIO_Init+0x2d0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d863      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b2a:	4a9b      	ldr	r2, [pc, #620]	; (8001d98 <HAL_GPIO_Init+0x2d4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d046      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
 8001b30:	4a99      	ldr	r2, [pc, #612]	; (8001d98 <HAL_GPIO_Init+0x2d4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d85d      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d82a      	bhi.n	8001b90 <HAL_GPIO_Init+0xcc>
 8001b3a:	2b12      	cmp	r3, #18
 8001b3c:	d859      	bhi.n	8001bf2 <HAL_GPIO_Init+0x12e>
 8001b3e:	a201      	add	r2, pc, #4	; (adr r2, 8001b44 <HAL_GPIO_Init+0x80>)
 8001b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b44:	08001bbf 	.word	0x08001bbf
 8001b48:	08001b99 	.word	0x08001b99
 8001b4c:	08001bab 	.word	0x08001bab
 8001b50:	08001bed 	.word	0x08001bed
 8001b54:	08001bf3 	.word	0x08001bf3
 8001b58:	08001bf3 	.word	0x08001bf3
 8001b5c:	08001bf3 	.word	0x08001bf3
 8001b60:	08001bf3 	.word	0x08001bf3
 8001b64:	08001bf3 	.word	0x08001bf3
 8001b68:	08001bf3 	.word	0x08001bf3
 8001b6c:	08001bf3 	.word	0x08001bf3
 8001b70:	08001bf3 	.word	0x08001bf3
 8001b74:	08001bf3 	.word	0x08001bf3
 8001b78:	08001bf3 	.word	0x08001bf3
 8001b7c:	08001bf3 	.word	0x08001bf3
 8001b80:	08001bf3 	.word	0x08001bf3
 8001b84:	08001bf3 	.word	0x08001bf3
 8001b88:	08001ba1 	.word	0x08001ba1
 8001b8c:	08001bb5 	.word	0x08001bb5
 8001b90:	4a82      	ldr	r2, [pc, #520]	; (8001d9c <HAL_GPIO_Init+0x2d8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b96:	e02c      	b.n	8001bf2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	623b      	str	r3, [r7, #32]
          break;
 8001b9e:	e029      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e024      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	3308      	adds	r3, #8
 8001bb0:	623b      	str	r3, [r7, #32]
          break;
 8001bb2:	e01f      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	330c      	adds	r3, #12
 8001bba:	623b      	str	r3, [r7, #32]
          break;
 8001bbc:	e01a      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	623b      	str	r3, [r7, #32]
          break;
 8001bca:	e013      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	611a      	str	r2, [r3, #16]
          break;
 8001bde:	e009      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be0:	2308      	movs	r3, #8
 8001be2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	615a      	str	r2, [r3, #20]
          break;
 8001bea:	e003      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
          break;
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x130>
          break;
 8001bf2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2bff      	cmp	r3, #255	; 0xff
 8001bf8:	d801      	bhi.n	8001bfe <HAL_GPIO_Init+0x13a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	e001      	b.n	8001c02 <HAL_GPIO_Init+0x13e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3304      	adds	r3, #4
 8001c02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2bff      	cmp	r3, #255	; 0xff
 8001c08:	d802      	bhi.n	8001c10 <HAL_GPIO_Init+0x14c>
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x152>
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	3b08      	subs	r3, #8
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	401a      	ands	r2, r3
 8001c28:	6a39      	ldr	r1, [r7, #32]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	431a      	orrs	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8090 	beq.w	8001d64 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c44:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_GPIO_Init+0x2dc>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_GPIO_Init+0x2dc>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_GPIO_Init+0x2dc>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c5c:	4a51      	ldr	r2, [pc, #324]	; (8001da4 <HAL_GPIO_Init+0x2e0>)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a49      	ldr	r2, [pc, #292]	; (8001da8 <HAL_GPIO_Init+0x2e4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d00d      	beq.n	8001ca4 <HAL_GPIO_Init+0x1e0>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a48      	ldr	r2, [pc, #288]	; (8001dac <HAL_GPIO_Init+0x2e8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d007      	beq.n	8001ca0 <HAL_GPIO_Init+0x1dc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a47      	ldr	r2, [pc, #284]	; (8001db0 <HAL_GPIO_Init+0x2ec>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_GPIO_Init+0x1d8>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e004      	b.n	8001ca6 <HAL_GPIO_Init+0x1e2>
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e002      	b.n	8001ca6 <HAL_GPIO_Init+0x1e2>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_GPIO_Init+0x1e2>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca8:	f002 0203 	and.w	r2, r2, #3
 8001cac:	0092      	lsls	r2, r2, #2
 8001cae:	4093      	lsls	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cb6:	493b      	ldr	r1, [pc, #236]	; (8001da4 <HAL_GPIO_Init+0x2e0>)
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cd0:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4937      	ldr	r1, [pc, #220]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cde:	4b35      	ldr	r3, [pc, #212]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4933      	ldr	r1, [pc, #204]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	492d      	ldr	r1, [pc, #180]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60cb      	str	r3, [r1, #12]
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4929      	ldr	r1, [pc, #164]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4923      	ldr	r1, [pc, #140]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	491f      	ldr	r1, [pc, #124]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4919      	ldr	r1, [pc, #100]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4915      	ldr	r1, [pc, #84]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	3301      	adds	r3, #1
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f aeaf 	bne.w	8001ad8 <HAL_GPIO_Init+0x14>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	372c      	adds	r7, #44	; 0x2c
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	10320000 	.word	0x10320000
 8001d8c:	10310000 	.word	0x10310000
 8001d90:	10220000 	.word	0x10220000
 8001d94:	10210000 	.word	0x10210000
 8001d98:	10120000 	.word	0x10120000
 8001d9c:	10110000 	.word	0x10110000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40010800 	.word	0x40010800
 8001dac:	40010c00 	.word	0x40010c00
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dd4:	e003      	b.n	8001dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	611a      	str	r2, [r3, #16]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43d9      	mvns	r1, r3
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	400b      	ands	r3, r1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e26c      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8087 	beq.w	8001f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e3c:	4b92      	ldr	r3, [pc, #584]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d00c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e48:	4b8f      	ldr	r3, [pc, #572]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d112      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
 8001e54:	4b8c      	ldr	r3, [pc, #560]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e62:	4b89      	ldr	r3, [pc, #548]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d06c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x12c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d168      	bne.n	8001f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e246      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x76>
 8001e84:	4b80      	ldr	r3, [pc, #512]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a7f      	ldr	r2, [pc, #508]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e02e      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x98>
 8001e9a:	4b7b      	ldr	r3, [pc, #492]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7a      	ldr	r2, [pc, #488]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b78      	ldr	r3, [pc, #480]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a77      	ldr	r2, [pc, #476]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xbc>
 8001ebe:	4b72      	ldr	r3, [pc, #456]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a71      	ldr	r2, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6e      	ldr	r2, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001ed8:	4b6b      	ldr	r3, [pc, #428]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6a      	ldr	r2, [pc, #424]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a67      	ldr	r2, [pc, #412]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fccc 	bl	8001894 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff fcc8 	bl	8001894 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1fa      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe4>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fcb8 	bl	8001894 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff fcb4 	bl	8001894 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1e6      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x10c>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f56:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x18c>
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	4b43      	ldr	r3, [pc, #268]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x176>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1ba      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4939      	ldr	r1, [pc, #228]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	e03a      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fc6d 	bl	8001894 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff fc69 	bl	8001894 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e19b      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4927      	ldr	r1, [pc, #156]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fc4c 	bl	8001894 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7ff fc48 	bl	8001894 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e17a      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03a      	beq.n	80020a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d019      	beq.n	8002066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_RCC_OscConfig+0x274>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002038:	f7ff fc2c 	bl	8001894 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7ff fc28 	bl	8001894 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e15a      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCC_OscConfig+0x26c>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800205e:	2001      	movs	r0, #1
 8002060:	f000 fa9a 	bl	8002598 <RCC_Delay>
 8002064:	e01c      	b.n	80020a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_OscConfig+0x274>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff fc12 	bl	8001894 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002072:	e00f      	b.n	8002094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff fc0e 	bl	8001894 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d908      	bls.n	8002094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e140      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	42420000 	.word	0x42420000
 8002090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b9e      	ldr	r3, [pc, #632]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e9      	bne.n	8002074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a6 	beq.w	80021fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b97      	ldr	r3, [pc, #604]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a93      	ldr	r2, [pc, #588]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b91      	ldr	r3, [pc, #580]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d118      	bne.n	8002118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e6:	4b8b      	ldr	r3, [pc, #556]	; (8002314 <HAL_RCC_OscConfig+0x4f8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a8a      	ldr	r2, [pc, #552]	; (8002314 <HAL_RCC_OscConfig+0x4f8>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f2:	f7ff fbcf 	bl	8001894 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fa:	f7ff fbcb 	bl	8001894 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0fd      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b81      	ldr	r3, [pc, #516]	; (8002314 <HAL_RCC_OscConfig+0x4f8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x312>
 8002120:	4b7b      	ldr	r3, [pc, #492]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a7a      	ldr	r2, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	e02d      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x334>
 8002136:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a75      	ldr	r2, [pc, #468]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a72      	ldr	r2, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	e01c      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b05      	cmp	r3, #5
 8002156:	d10c      	bne.n	8002172 <HAL_RCC_OscConfig+0x356>
 8002158:	4b6d      	ldr	r3, [pc, #436]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a6c      	ldr	r2, [pc, #432]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a69      	ldr	r2, [pc, #420]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	e00b      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 8002172:	4b67      	ldr	r3, [pc, #412]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a66      	ldr	r2, [pc, #408]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b64      	ldr	r3, [pc, #400]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a63      	ldr	r2, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d015      	beq.n	80021be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff fb7f 	bl	8001894 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7ff fb7b 	bl	8001894 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0ab      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	4b57      	ldr	r3, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ee      	beq.n	800219a <HAL_RCC_OscConfig+0x37e>
 80021bc:	e014      	b.n	80021e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7ff fb69 	bl	8001894 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7ff fb65 	bl	8001894 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e095      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ee      	bne.n	80021c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ee:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8081 	beq.w	8002306 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	4b42      	ldr	r3, [pc, #264]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d061      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d146      	bne.n	80022a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002218:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <HAL_RCC_OscConfig+0x4fc>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7ff fb39 	bl	8001894 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7ff fb35 	bl	8001894 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e067      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002238:	4b35      	ldr	r3, [pc, #212]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f0      	bne.n	8002226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d108      	bne.n	8002260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	492d      	ldr	r1, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a19      	ldr	r1, [r3, #32]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	430b      	orrs	r3, r1
 8002272:	4927      	ldr	r1, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x4fc>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff fb09 	bl	8001894 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002286:	f7ff fb05 	bl	8001894 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e037      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x46a>
 80022a4:	e02f      	b.n	8002306 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_RCC_OscConfig+0x4fc>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff faf2 	bl	8001894 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff faee 	bl	8001894 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e020      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x498>
 80022d2:	e018      	b.n	8002306 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e013      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	42420060 	.word	0x42420060

0800231c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d0      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4965      	ldr	r1, [pc, #404]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b63      	ldr	r3, [pc, #396]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0b8      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002378:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a58      	ldr	r2, [pc, #352]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002382:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002390:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800239a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	494d      	ldr	r1, [pc, #308]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d040      	beq.n	800243c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d115      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e073      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06b      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4936      	ldr	r1, [pc, #216]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800240c:	f7ff fa42 	bl	8001894 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7ff fa3e 	bl	8001894 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e053      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 020c 	and.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d1eb      	bne.n	8002414 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d210      	bcs.n	800246c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0207 	bic.w	r2, r3, #7
 8002452:	4922      	ldr	r1, [pc, #136]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e032      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4916      	ldr	r1, [pc, #88]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024aa:	f000 f821 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	490a      	ldr	r1, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1cc>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1d0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f9a0 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08002dfc 	.word	0x08002dfc
 80024e8:	20000028 	.word	0x20000028
 80024ec:	2000002c 	.word	0x2000002c

080024f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_RCC_GetSysClockFreq+0x94>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d002      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x30>
 800251a:	2b08      	cmp	r3, #8
 800251c:	d003      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x36>
 800251e:	e027      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_RCC_GetSysClockFreq+0x98>)
 8002522:	613b      	str	r3, [r7, #16]
      break;
 8002524:	e027      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	0c9b      	lsrs	r3, r3, #18
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002530:	5cd3      	ldrb	r3, [r2, r3]
 8002532:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_RCC_GetSysClockFreq+0x94>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0c5b      	lsrs	r3, r3, #17
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <HAL_RCC_GetSysClockFreq+0xa0>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_RCC_GetSysClockFreq+0x98>)
 8002552:	fb02 f203 	mul.w	r2, r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e004      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	613b      	str	r3, [r7, #16]
      break;
 800256e:	e002      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	613b      	str	r3, [r7, #16]
      break;
 8002574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002576:	693b      	ldr	r3, [r7, #16]
}
 8002578:	4618      	mov	r0, r3
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	007a1200 	.word	0x007a1200
 800258c:	08002e0c 	.word	0x08002e0c
 8002590:	08002e1c 	.word	0x08002e1c
 8002594:	003d0900 	.word	0x003d0900

08002598 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <RCC_Delay+0x34>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <RCC_Delay+0x38>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0a5b      	lsrs	r3, r3, #9
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b4:	bf00      	nop
  }
  while (Delay --);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <RCC_Delay+0x1c>
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000028 	.word	0x20000028
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e041      	b.n	800266a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff f870 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f000 fa56 	bl	8002ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d001      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e035      	b.n	80026f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a16      	ldr	r2, [pc, #88]	; (8002704 <HAL_TIM_Base_Start_IT+0x90>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_TIM_Base_Start_IT+0x4e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b6:	d004      	beq.n	80026c2 <HAL_TIM_Base_Start_IT+0x4e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a12      	ldr	r2, [pc, #72]	; (8002708 <HAL_TIM_Base_Start_IT+0x94>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d111      	bne.n	80026e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d010      	beq.n	80026f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e4:	e007      	b.n	80026f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400

0800270c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d020      	beq.n	8002770 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01b      	beq.n	8002770 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0202 	mvn.w	r2, #2
 8002740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f998 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f98b 	bl	8002a7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f99a 	bl	8002a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d020      	beq.n	80027bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01b      	beq.n	80027bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0204 	mvn.w	r2, #4
 800278c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f972 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f965 	bl	8002a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f974 	bl	8002a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0208 	mvn.w	r2, #8
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2204      	movs	r2, #4
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f94c 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f93f 	bl	8002a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f94e 	bl	8002a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0210 	mvn.w	r2, #16
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2208      	movs	r2, #8
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f926 	bl	8002a8c <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f919 	bl	8002a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f928 	bl	8002a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0201 	mvn.w	r2, #1
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fd fe68 	bl	8000548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00c      	beq.n	800289c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa6f 	bl	8002d7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00c      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8f8 	bl	8002ab0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00c      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0220 	mvn.w	r2, #32
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fa42 	bl	8002d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_TIM_ConfigClockSource+0x1c>
 8002904:	2302      	movs	r3, #2
 8002906:	e0b4      	b.n	8002a72 <HAL_TIM_ConfigClockSource+0x186>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800292e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002940:	d03e      	beq.n	80029c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002946:	f200 8087 	bhi.w	8002a58 <HAL_TIM_ConfigClockSource+0x16c>
 800294a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294e:	f000 8086 	beq.w	8002a5e <HAL_TIM_ConfigClockSource+0x172>
 8002952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002956:	d87f      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b70      	cmp	r3, #112	; 0x70
 800295a:	d01a      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0xa6>
 800295c:	2b70      	cmp	r3, #112	; 0x70
 800295e:	d87b      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b60      	cmp	r3, #96	; 0x60
 8002962:	d050      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x11a>
 8002964:	2b60      	cmp	r3, #96	; 0x60
 8002966:	d877      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b50      	cmp	r3, #80	; 0x50
 800296a:	d03c      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0xfa>
 800296c:	2b50      	cmp	r3, #80	; 0x50
 800296e:	d873      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d058      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x13a>
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d86f      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b30      	cmp	r3, #48	; 0x30
 800297a:	d064      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x15a>
 800297c:	2b30      	cmp	r3, #48	; 0x30
 800297e:	d86b      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d060      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x15a>
 8002984:	2b20      	cmp	r3, #32
 8002986:	d867      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d05c      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x15a>
 800298c:	2b10      	cmp	r3, #16
 800298e:	d05a      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x15a>
 8002990:	e062      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6899      	ldr	r1, [r3, #8]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f000 f96a 	bl	8002c7a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	609a      	str	r2, [r3, #8]
      break;
 80029be:	e04f      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6899      	ldr	r1, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f000 f953 	bl	8002c7a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e2:	609a      	str	r2, [r3, #8]
      break;
 80029e4:	e03c      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f000 f8ca 	bl	8002b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2150      	movs	r1, #80	; 0x50
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f921 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 8002a04:	e02c      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f000 f8e8 	bl	8002be8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2160      	movs	r1, #96	; 0x60
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f911 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 8002a24:	e01c      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f000 f8aa 	bl	8002b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2140      	movs	r1, #64	; 0x40
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f901 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 8002a44:	e00c      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f000 f8f8 	bl	8002c46 <TIM_ITRx_SetConfig>
      break;
 8002a56:	e003      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e000      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
	...

08002ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <TIM_Base_SetConfig+0xc0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_Base_SetConfig+0x28>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0x28>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a28      	ldr	r2, [pc, #160]	; (8002b88 <TIM_Base_SetConfig+0xc4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d108      	bne.n	8002afe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <TIM_Base_SetConfig+0xc0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <TIM_Base_SetConfig+0x52>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d003      	beq.n	8002b16 <TIM_Base_SetConfig+0x52>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <TIM_Base_SetConfig+0xc4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d108      	bne.n	8002b28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <TIM_Base_SetConfig+0xc0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d103      	bne.n	8002b5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f023 0201 	bic.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	611a      	str	r2, [r3, #16]
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40000400 	.word	0x40000400

08002b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f023 0201 	bic.w	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f023 030a 	bic.w	r3, r3, #10
 8002bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f023 0210 	bic.w	r2, r3, #16
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	031b      	lsls	r3, r3, #12
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	621a      	str	r2, [r3, #32]
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f043 0307 	orr.w	r3, r3, #7
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b087      	sub	sp, #28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	021a      	lsls	r2, r3, #8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	609a      	str	r2, [r3, #8]
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e041      	b.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d10c      	bne.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400

08002d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2600      	movs	r6, #0
 8002d90:	4d0c      	ldr	r5, [pc, #48]	; (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1b64      	subs	r4, r4, r5
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	f000 f822 	bl	8002de4 <_init>
 8002da0:	2600      	movs	r6, #0
 8002da2:	4d0a      	ldr	r5, [pc, #40]	; (8002dcc <__libc_init_array+0x40>)
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1b64      	subs	r4, r4, r5
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08002e20 	.word	0x08002e20
 8002dc8:	08002e20 	.word	0x08002e20
 8002dcc:	08002e20 	.word	0x08002e20
 8002dd0:	08002e24 	.word	0x08002e24

08002dd4 <memset>:
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4402      	add	r2, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	f803 1b01 	strb.w	r1, [r3], #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <_init>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr

08002df0 <_fini>:
 8002df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df2:	bf00      	nop
 8002df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df6:	bc08      	pop	{r3}
 8002df8:	469e      	mov	lr, r3
 8002dfa:	4770      	bx	lr
